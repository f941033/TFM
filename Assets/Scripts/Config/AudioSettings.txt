using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.UI;

public class AudioSettings : MonoBehaviour
{
    [Header("Audio Sources")]
    public AudioSource musicAudioSource; // Referencia al AudioManager

    [Header("UI Sliders")]
    public Slider musicVolumeSlider;
    public Slider sfxVolumeSlider;

    [Header("Configuración")]
    [Range(0f, 1f)] public float defaultMusicVolume = 0.7f;
    [Range(0f, 1f)] public float defaultSFXVolume = 0.8f;

    // Variables estáticas para acceso global
    public static float MusicVolume { get; private set; } = 0.7f;
    public static float SFXVolume { get; private set; } = 0.8f;

    void Awake()
    {
        Debug.Log("AudioSettings Awake on " + gameObject.scene.name);
        // Asegurar que solo hay una instancia
        if (FindObjectsByType<AudioSettings>(FindObjectsSortMode.None).Length > 1)
        {
            Destroy(gameObject);
            return;
        }

        DontDestroyOnLoad(gameObject);
    }


    void Start()
    {
        Debug.Log("AudioSettings Start persists: " + gameObject.name);
        InitializeAudioSettings();
    }

    void InitializeAudioSettings()
    {
        // Cargar valores guardados o usar por defecto
        MusicVolume = PlayerPrefs.GetFloat("MusicVolume", defaultMusicVolume);
        Debug.Log("Volume leído de PlayerPrefs: " + MusicVolume);
        SFXVolume = PlayerPrefs.GetFloat("SFXVolume", defaultSFXVolume);

        // Configurar sliders
        if (musicVolumeSlider != null)
        {
            musicVolumeSlider.value = MusicVolume;
            //musicVolumeSlider.onValueChanged.AddListener(OnMusicVolumeChanged);
        }

        if (sfxVolumeSlider != null)
        {
            sfxVolumeSlider.value = SFXVolume;
            //sfxVolumeSlider.onValueChanged.AddListener(OnSFXVolumeChanged);
        }

        // Aplicar volumen inicial
        ApplyMusicVolume();
    }

    public void OnMusicVolumeChanged(float value)
    {
        Debug.Log("Cambiando MusicVolume a " + value);
        MusicVolume = value;
        ApplyMusicVolume();
        PlayerPrefs.SetFloat("MusicVolume", MusicVolume);
        PlayerPrefs.Save();
    }

    public void OnSFXVolumeChanged(float value)
    {
        SFXVolume = value;
        PlayerPrefs.SetFloat("SFXVolume", SFXVolume);
        PlayerPrefs.Save();
    }

    void ApplyMusicVolume()
    {
        if (musicAudioSource != null)
        {
            musicAudioSource.volume = MusicVolume;
        }
    }

    // Método estático para que otros objetos reproduzcan SFX con volumen correcto
    public static void PlaySFX(AudioSource audioSource, AudioClip clip)
    {
        if (audioSource != null && clip != null)
        {
            audioSource.volume = SFXVolume;
            audioSource.PlayOneShot(clip);
        }
    }

    // Método estático para ajustar volumen de AudioSource existente
    public static void SetSFXVolume(AudioSource audioSource)
    {
        if (audioSource != null)
        {
            audioSource.volume = SFXVolume;
        }
    }
}
